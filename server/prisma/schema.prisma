// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  username        String    @unique
  firstName       String
  lastName        String
  birthday        String
  email           String    @unique
  password        String
  isAdmin         Boolean
  bio             String?
  writtenPosts    Post[]    @relation("writtenPosts")
  writtenComments Comment[] @relation("writtenComments")
  // userProfile  Profile[] @relation("userProfile")
  likedPosts      Post[]    @relation("likedPosts")
  favoritedPosts  Post[]    @relation("favoritedPosts")
  followedBy      Follows[] @relation("following")
  following       Follows[] @relation("follower")

  @@unique([id, username])
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}

model Post {
  id             String    @id @default(uuid())
  likes          Int       @default(0)
  title          String
  content        String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  author         User      @relation("writtenPosts", fields: [authorId, authorUsername], references: [id, username])
  authorId       String
  authorUsername String
  likedBy        User[]    @relation("likedPosts")
  favortedBy     User[]    @relation("favoritedPosts")
  comments       Comment[] @relation("comments")
}

model Comment {
  id             String   @id @default(uuid())
  likes          Int      @default(0)
  content        String
  createdAt      DateTime @default(now())
  author         User     @relation("writtenComments", fields: [authorUsername], references: [username])
  authorUsername String
  post           Post     @relation("comments", fields: [postId], references: [id])
  postId         String
}

// model Profile {
//   id       String  @id @default(uuid())
//   bio      String?
//   user     User    @relation("userProfile", fields: [userId, username], references: [id, username])
//   userId   String
//   username String
// }

//               ---- Need to push Prisma DB

//  likedBy   User?   @relation("likedPosts", fields: [likedById], references: [id])
//  likedById String?
//  
